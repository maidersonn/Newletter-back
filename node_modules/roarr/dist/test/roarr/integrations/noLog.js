"use strict";
/* eslint-disable node/no-process-env */
/* eslint-disable ava/use-test */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ava_1 = __importDefault(require("ava"));
const sinon = __importStar(require("sinon"));
const test = ava_1.default;
test.beforeEach(async (t) => {
    process.env.ROARR_LOG = '0';
    const { Roarr, ROARR, } = await Promise.resolve().then(() => __importStar(require('../../../src/Roarr')));
    const write = sinon.stub(ROARR, 'write');
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    write.callsFake(() => { });
    t.context = {
        Roarr,
        ROARR,
        write,
    };
});
test('ROARR.write is not triggered when ROARR_LOG=0', (t) => {
    const { Roarr, write, } = t.context;
    Roarr.info('foo');
    t.is(write.callCount, 0);
});
